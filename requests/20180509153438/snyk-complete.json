{"ok":false,"vulnerabilities":[{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","babel-cli@6.26.0","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","babel-cli@6.26.0","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,"chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,"chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","webpack-dev-server@2.9.7","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,"nwb@0.22.0","webpack-dev-server@3.1.1","chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","webpack-dev-server@2.9.4","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"webpack-dev-server@2.10.0","chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","cpx@1.5.0","chokidar@1.7.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-haste-map@20.0.5","sane@1.6.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"jest@21.0.0","jest-cli@21.0.0","jest-haste-map@21.0.0","sane@2.5.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-haste-map@20.0.5","sane@1.6.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"jest@21.0.0","jest-cli@21.0.0","jest-runtime@21.0.0","jest-haste-map@21.0.0","sane@2.5.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","tape-watch@2.3.0","chokidar@1.6.0","anymatch@1.3.2","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"chokidar@2.0.0","anymatch@2.0.0","micromatch@3.1.4","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","webpack-dev-server@2.9.7","http-proxy-middleware@0.17.4","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"webpack-dev-server@3.1.2","http-proxy-middleware@0.18.0","micromatch@3.1.9","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","webpack-dev-server@2.9.4","http-proxy-middleware@0.17.4","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,"webpack-dev-server@3.1.2","http-proxy-middleware@0.18.0","micromatch@3.1.9","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","webpack-dev-server@2.11.2","http-proxy-middleware@0.17.4","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,"webpack-dev-server@3.1.2","http-proxy-middleware@0.18.0","micromatch@3.1.9","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-environment-jsdom@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-environment-node@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-environment-node@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-snapshot@20.0.3","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-util@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-message-util@20.0.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-haste-map@20.0.5","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-haste-map@20.0.5","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","expect@21.2.1","jest-message-util@21.2.1","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-environment-node@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-util@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-message-util@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-haste-map@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-haste-map@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","micromatch@2.3.11","braces@1.8.5"],"upgradePath":[false,false,false,false,false,"micromatch@3.0.0","braces@2.3.1"],"version":"1.8.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/braces/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"braces","packageName":"braces","language":"js","packageManager":"npm","description":"## Overview\n[`braces`](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 19th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-BRACES-10900"]},"semver":{"unaffected":">=2.3.1","vulnerable":"<2.3.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-19T14:36:50.000Z","modificationTime":"2018-02-19T14:29:31.469Z","publicationTime":"2018-02-19T16:32:28.424Z","disclosureTime":"2018-02-19T20:39:06.000Z","id":"npm:braces:20180219","alternativeIds":["SNYK-JS-BRACES-10900"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","expand-braces@0.1.2","braces@0.1.5"],"upgradePath":[false,false,false,false,"braces@2.3.1"],"version":"0.1.5","name":"braces","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/expand-braces/node_modules/braces/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"content-type-parser","packageName":"content-type-parser","language":"js","packageManager":"npm","id":"npm:content-type-parser:20170905","description":"## Overview\n[`content-type-parser`](https://www.npmjs.com/package/content-type-parser) parses the Content-Type header field into an introspectable data structure.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the user agent parser. It used a regular expression (`/^(.*?)\\/(.*?)([\\t ]*;.*)?$/`) in order to parse user agents. This can cause a very moderate impact of about 4 seconds matching time for data 30k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nThere is no fix for `content-type-parser`. The package was renamed from `content-type-parser` to `whatwg-mimetype`, which fixes the issue in version 2.0.0.\n\n## References\n- [GitHub Issue](https://github.com/jsdom/whatwg-mimetype/issues/3)\n- [GitHub Commit](https://github.com/jsdom/whatwg-mimetype/commit/26c539a699778f8743b8319c298b5fb28a4328d0)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-CONTENTTYPEPARSER-10847"]},"semver":{"unaffected":">=0.0.0","vulnerable":"*"},"patches":[],"cvssScore":5.3,"severity":"medium","CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-09-05T21:00:00.000Z","publicationTime":"2017-12-10T06:02:45.497Z","modificationTime":"2017-09-05T10:02:45.497Z","creationTime":"2017-09-05T10:02:45.497Z","alternativeIds":["SNYK-JS-CONTENTTYPEPARSER-10847"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","content-type-parser@1.0.2"],"upgradePath":[],"version":"1.0.2","name":"content-type-parser","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/content-type-parser/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"content-type-parser","packageName":"content-type-parser","language":"js","packageManager":"npm","id":"npm:content-type-parser:20170905","description":"## Overview\n[`content-type-parser`](https://www.npmjs.com/package/content-type-parser) parses the Content-Type header field into an introspectable data structure.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the user agent parser. It used a regular expression (`/^(.*?)\\/(.*?)([\\t ]*;.*)?$/`) in order to parse user agents. This can cause a very moderate impact of about 4 seconds matching time for data 30k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nThere is no fix for `content-type-parser`. The package was renamed from `content-type-parser` to `whatwg-mimetype`, which fixes the issue in version 2.0.0.\n\n## References\n- [GitHub Issue](https://github.com/jsdom/whatwg-mimetype/issues/3)\n- [GitHub Commit](https://github.com/jsdom/whatwg-mimetype/commit/26c539a699778f8743b8319c298b5fb28a4328d0)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-CONTENTTYPEPARSER-10847"]},"semver":{"unaffected":">=0.0.0","vulnerable":"*"},"patches":[],"cvssScore":5.3,"severity":"medium","CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-09-05T21:00:00.000Z","publicationTime":"2017-12-10T06:02:45.497Z","modificationTime":"2017-09-05T10:02:45.497Z","creationTime":"2017-09-05T10:02:45.497Z","alternativeIds":["SNYK-JS-CONTENTTYPEPARSER-10847"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","content-type-parser@1.0.2"],"upgradePath":[],"version":"1.0.2","name":"content-type-parser","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/content-type-parser/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"content-type-parser","packageName":"content-type-parser","language":"js","packageManager":"npm","id":"npm:content-type-parser:20170905","description":"## Overview\n[`content-type-parser`](https://www.npmjs.com/package/content-type-parser) parses the Content-Type header field into an introspectable data structure.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the user agent parser. It used a regular expression (`/^(.*?)\\/(.*?)([\\t ]*;.*)?$/`) in order to parse user agents. This can cause a very moderate impact of about 4 seconds matching time for data 30k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nThere is no fix for `content-type-parser`. The package was renamed from `content-type-parser` to `whatwg-mimetype`, which fixes the issue in version 2.0.0.\n\n## References\n- [GitHub Issue](https://github.com/jsdom/whatwg-mimetype/issues/3)\n- [GitHub Commit](https://github.com/jsdom/whatwg-mimetype/commit/26c539a699778f8743b8319c298b5fb28a4328d0)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-CONTENTTYPEPARSER-10847"]},"semver":{"unaffected":">=0.0.0","vulnerable":"*"},"patches":[],"cvssScore":5.3,"severity":"medium","CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-09-05T21:00:00.000Z","publicationTime":"2017-12-10T06:02:45.497Z","modificationTime":"2017-09-05T10:02:45.497Z","creationTime":"2017-09-05T10:02:45.497Z","alternativeIds":["SNYK-JS-CONTENTTYPEPARSER-10847"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","content-type-parser@1.0.2"],"upgradePath":[],"version":"1.0.2","name":"content-type-parser","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/content-type-parser/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"debug","packageName":"debug","language":"js","packageManager":"npm","description":"## Overview\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\n\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\n\n## References\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)\n","identifiers":{"NSP":534,"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DEBUG-10762"]},"semver":{"unaffected":"<3.0.0 >= 2.6.9 || >=3.1.0","vulnerable":"<2.6.9 || >=3.0.0 <3.1.0"},"patches":[{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"],"version":">= 3.0.0 <=3.0.1","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:0"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.5.1 <2.6.9","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:1"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.4.0 <2.5.0","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:2"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.0.0 <2.4.0","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:3"}],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-09-05T21:00:00.000Z","publicationTime":"2017-09-26T03:55:05.106Z","modificationTime":"2017-09-27T06:55:05.106Z","creationTime":"2017-09-13T07:55:05.106Z","id":"npm:debug:20170905","alternativeIds":["SNYK-JS-DEBUG-10762"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","debug@2.2.0"],"upgradePath":[false,false,false,false,"mailgun-js@0.10.1","debug@2.6.9"],"version":"2.2.0","name":"debug","isUpgradable":false,"isPatchable":true,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/mailgun-js/node_modules/debug/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"debug","packageName":"debug","language":"js","packageManager":"npm","description":"## Overview\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\n\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\n\n## References\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)\n","identifiers":{"NSP":534,"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DEBUG-10762"]},"semver":{"unaffected":"<3.0.0 >= 2.6.9 || >=3.1.0","vulnerable":"<2.6.9 || >=3.0.0 <3.1.0"},"patches":[{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"],"version":">= 3.0.0 <=3.0.1","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:0"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.5.1 <2.6.9","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:1"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.4.0 <2.5.0","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:2"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"],"version":">=2.0.0 <2.4.0","modificationTime":"2017-09-24T06:52:18.990Z","comments":[],"id":"patch:npm:debug:20170905:3"}],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-09-05T21:00:00.000Z","publicationTime":"2017-09-26T03:55:05.106Z","modificationTime":"2017-09-27T06:55:05.106Z","creationTime":"2017-09-13T07:55:05.106Z","id":"npm:debug:20170905","alternativeIds":["SNYK-JS-DEBUG-10762"],"from":["DependencysMirror@1.0.0","tape-watch@2.3.0","debug@2.6.0"],"upgradePath":[false,false,"debug@2.6.9"],"version":"2.6.0","name":"debug","isUpgradable":false,"isPatchable":true,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/tape-watch/node_modules/debug/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","babel-cli@6.26.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"babel-cli@6.26.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","babel-cli@6.26.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"nwb@0.21.5","babel-cli@6.26.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"nwb@0.21.5","karma@2.0.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","webpack-dev-server@2.9.7","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"nwb@0.21.5","webpack-dev-server@2.9.7","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","webpack-dev-server@2.9.4","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"react-scripts@1.1.4","webpack-dev-server@2.9.4","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","cpx@1.5.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"cpx@1.5.0","chokidar@1.7.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","webpack@3.10.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"nwb@0.21.5","webpack@3.10.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","webpack@3.8.1","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"react-scripts@1.1.4","webpack@3.8.1","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","@storybook/react@3.4.3","@storybook/core@3.4.3","webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"@storybook/react@3.4.3","@storybook/core@3.4.3","webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","@storybook/react@3.4.3","webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"@storybook/react@3.4.3","webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"webpack@3.11.0","watchpack@1.6.0","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","webpack-dev-server@2.11.2","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"webpack-dev-server@2.11.2","chokidar@2.0.3","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"react-scripts@1.1.4","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-haste-map@22.4.3","sane@2.5.2","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"deep-extend","packageName":"deep-extend","language":"js","packageManager":"npm","description":"## Overview\nAffected versions of [deep-extend](https://www.npmjs.com/package/deep-extend) are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## PoC by HoLyVieR\n```js\nvar merge = require('deep-extend');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nmerge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/311333)\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/38)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-DEEPEXTEND-12120"],"CVE":[],"CWE":["CWE-400"]},"semver":{"unaffected":">=0.5.1","vulnerable":"<0.5.1"},"severity":"low","cvssScore":2,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-04-15T20:11:17.552Z","modificationTime":"2018-04-15T20:11:17.552Z","publicationTime":"2018-04-25T07:45:48.917Z","disclosureTime":"2018-04-09T20:11:17.552Z","id":"npm:deep-extend:20180409","alternativeIds":["SNYK-JS-DEEPEXTEND-12120"],"from":["DependencysMirror@1.0.0","tape-watch@2.3.0","chokidar@1.6.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.6","deep-extend@0.4.2"],"upgradePath":[false,"tape-watch@2.3.0","chokidar@1.6.0","fsevents@1.2.3","node-pre-gyp@0.9.1","rc@1.2.7","deep-extend@0.5.1"],"version":"0.4.2","name":"deep-extend","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/fsevents/node_modules/deep-extend/package.json","bundled":["DependencysMirror@1.0.0","fsevents@1.2.3","node-pre-gyp@0.9.1"],"parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","diff@3.4.0"],"upgradePath":[false,"nwb@0.22.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-matchers@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-jasmine2@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.4.0"],"upgradePath":[false,"react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-snapshot@20.0.3","jest-diff@20.0.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","expect@21.2.1","jest-diff@21.2.1","diff@3.4.0"],"upgradePath":[false,"expect@21.2.1","jest-diff@21.2.1","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest-glamor-react@3.3.0","jest-diff@21.2.1","diff@3.4.0"],"upgradePath":[false,"jest-glamor-react@3.3.0","jest-diff@21.2.1","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest-glamor-react@3.3.0","jest-snapshot@21.2.1","jest-diff@21.2.1","diff@3.4.0"],"upgradePath":[false,"jest-glamor-react@3.3.0","jest-snapshot@21.2.1","jest-diff@21.2.1","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","sinon@4.5.0","diff@3.4.0"],"upgradePath":[false,"sinon@4.5.0","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-snapshot@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.4.0"],"upgradePath":[false,"jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-jasmine2@22.4.3","expect@22.4.3","jest-diff@22.4.3","diff@3.5.0"],"version":"3.4.0","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/diff/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"diff","packageName":"diff","language":"js","packageManager":"npm","description":"## Overview\n[`diff`](https://www.npmjs.com/package/diff) is a javascript text differencing implementation.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 48K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Fix issued\n* Mar 6th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `diff` to version 3.5.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0)","semver":{"vulnerable":">=3.0.0 <3.5.0","unaffected":"<3.0.0 || >3.5.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-DIFF-11050"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L","creationTime":"2018-03-05T16:02:49.081Z","modificationTime":"2018-03-05T16:02:49.081Z","publicationTime":"2018-03-06T13:02:49.081Z","disclosureTime":"2018-03-05T16:02:49.081Z","id":"npm:diff:20180305","alternativeIds":["SNYK-JS-DIFF-11050"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","mocha@4.1.0","diff@3.3.1"],"upgradePath":[false,"nwb@0.22.0","mocha@5.0.4","diff@3.5.0"],"version":"3.3.1","name":"diff","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/mocha/node_modules/diff/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"eslint","packageName":"eslint","language":"js","packageManager":"npm","description":"## Overview\n[`eslint`](https://www.npmjs.com/package/eslint) is an AST-based pattern checker for JavaScript.\n\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 100k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `eslint` to version 4.18.2 or higher.\n\n## References\n- [GitHub PR](https://github.com/eslint/eslint/pull/10019)\n- [GitHub Issue](https://github.com/eslint/eslint/issues/10002)\n- [GitHub Commit](https://github.com/eslint/eslint/commit/f6901d0bcf6c918ac4e5c6c7c4bddeb2cb715c09)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-ESLINT-11077"]},"semver":{"unaffected":">=4.18.2","vulnerable":"<4.18.2"},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2018-02-22T22:00:00.000Z","publicationTime":"2018-03-22T17:37:05.136Z","modificationTime":"2018-03-22T17:37:05.136Z","creationTime":"2018-03-22T17:37:05.136Z","id":"npm:eslint:20180222","alternativeIds":["SNYK-JS-ESLINT-11077"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","eslint@4.10.0"],"upgradePath":[false,false,"eslint@4.18.2"],"version":"4.10.0","name":"eslint","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/react-scripts/node_modules/eslint/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"eslint","packageName":"eslint","language":"js","packageManager":"npm","description":"## Overview\n[`eslint`](https://www.npmjs.com/package/eslint) is an AST-based pattern checker for JavaScript.\n\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 100k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `eslint` to version 4.18.2 or higher.\n\n## References\n- [GitHub PR](https://github.com/eslint/eslint/pull/10019)\n- [GitHub Issue](https://github.com/eslint/eslint/issues/10002)\n- [GitHub Commit](https://github.com/eslint/eslint/commit/f6901d0bcf6c918ac4e5c6c7c4bddeb2cb715c09)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-ESLINT-11077"]},"semver":{"unaffected":">=4.18.2","vulnerable":"<4.18.2"},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2018-02-22T22:00:00.000Z","publicationTime":"2018-03-22T17:37:05.136Z","modificationTime":"2018-03-22T17:37:05.136Z","creationTime":"2018-03-22T17:37:05.136Z","id":"npm:eslint:20180222","alternativeIds":["SNYK-JS-ESLINT-11077"],"from":["DependencysMirror@1.0.0","eslint-config-sonar@0.0.6","eslint-plugin-no-wildcard-postmessage@0.1.3","eslint@1.10.3"],"upgradePath":[false,false,false,"eslint@4.18.2"],"version":"1.10.3","name":"eslint","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/eslint-plugin-no-wildcard-postmessage/node_modules/eslint/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"eslint","packageName":"eslint","language":"js","packageManager":"npm","description":"## Overview\n[`eslint`](https://www.npmjs.com/package/eslint) is an AST-based pattern checker for JavaScript.\n\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 100k characters long.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nUpgrade `eslint` to version 4.18.2 or higher.\n\n## References\n- [GitHub PR](https://github.com/eslint/eslint/pull/10019)\n- [GitHub Issue](https://github.com/eslint/eslint/issues/10002)\n- [GitHub Commit](https://github.com/eslint/eslint/commit/f6901d0bcf6c918ac4e5c6c7c4bddeb2cb715c09)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-ESLINT-11077"]},"semver":{"unaffected":">=4.18.2","vulnerable":"<4.18.2"},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2018-02-22T22:00:00.000Z","publicationTime":"2018-03-22T17:37:05.136Z","modificationTime":"2018-03-22T17:37:05.136Z","creationTime":"2018-03-22T17:37:05.136Z","id":"npm:eslint:20180222","alternativeIds":["SNYK-JS-ESLINT-11077"],"from":["DependencysMirror@1.0.0","sass-lint@1.12.1","eslint@2.13.1"],"upgradePath":[false,false,"eslint@4.18.2"],"version":"2.13.1","name":"eslint","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/sass-lint/node_modules/eslint/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","request@2.75.0","hawk@3.1.3","hoek@2.16.3"],"upgradePath":[false,false,false,false,false,"request@2.82.0","hawk@6.0.2","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/loggly/node_modules/hoek/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","node-sass@4.9.0","request@2.79.0","hawk@3.1.3","hoek@2.16.3"],"upgradePath":[false,false,"request@2.82.0","hawk@6.0.2","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/node-sass/node_modules/hoek/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","request@2.75.0","hawk@3.1.3","boom@2.10.1","hoek@2.16.3"],"upgradePath":[false,false,false,false,false,"request@2.82.0","hawk@6.0.2","boom@4.0.0","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/loggly/node_modules/hoek/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","node-sass@4.9.0","request@2.79.0","hawk@3.1.3","boom@2.10.1","hoek@2.16.3"],"upgradePath":[false,false,"request@2.82.0","hawk@6.0.2","boom@4.0.0","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/node-sass/node_modules/hoek/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","request@2.75.0","hawk@3.1.3","cryptiles@2.0.5","boom@2.10.1","hoek@2.16.3"],"upgradePath":[false,false,false,false,false,"request@2.82.0","hawk@6.0.2","cryptiles@3.0.0","boom@3.1.3","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/loggly/node_modules/hoek/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","node-sass@4.9.0","request@2.79.0","hawk@3.1.3","cryptiles@2.0.5","boom@2.10.1","hoek@2.16.3"],"upgradePath":[false,false,"request@2.82.0","hawk@6.0.2","cryptiles@3.0.0","boom@3.1.3","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/node-sass/node_modules/hoek/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","request@2.75.0","hawk@3.1.3","sntp@1.0.9","hoek@2.16.3"],"upgradePath":[false,false,false,false,false,"request@2.82.0","hawk@6.0.2","sntp@2.0.1","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/loggly/node_modules/hoek/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"hoek","packageName":"hoek","language":"js","packageManager":"npm","description":"## Overview\n[hoek](https://github.com/hapijs/hoek) is a Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n\n```\n\n## Remediation\nUpgrade `hoek` to versions 4.2.1, 5.0.3 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [GitHub Issue - 4.2.1 Backport](https://github.com/hapijs/hoek/issues/230)","identifiers":{"ALTERNATIVE":["SNYK-JS-HOEK-12061"],"CVE":["CVE-2018-3728"],"CWE":["CWE-400"],"NSP":566},"semver":{"unaffected":">=4.2.1 <5.0.0 || >=5.0.3","vulnerable":"<4.2.1 || >=5.0.0 <5.0.3"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.612Z","modificationTime":"2018-02-13T22:28:27.612Z","publicationTime":"2018-02-14T13:22:50.418Z","disclosureTime":"2018-02-12T22:28:27.612Z","id":"npm:hoek:20180212","alternativeIds":["SNYK-JS-HOEK-12061"],"from":["DependencysMirror@1.0.0","node-sass@4.9.0","request@2.79.0","hawk@3.1.3","sntp@1.0.9","hoek@2.16.3"],"upgradePath":[false,false,"request@2.82.0","hawk@6.0.2","sntp@2.0.1","hoek@4.2.1"],"version":"2.16.3","name":"hoek","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/node-sass/node_modules/hoek/package.json","parentDepType":"dev"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"moduleName":"http-proxy-agent","packageName":"http-proxy-agent","language":"js","packageManager":"npm","description":"## Overview\n[http-proxy-agent](https://www.npmjs.com/package/http-proxy-agent) provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in http module.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure and Denial of Service (DoS) attacks due to passing unsanitized options to Buffer(arg).\n\n## Uninitialized memory Exposre PoC by ChALKer\n```js\n// listen with: nc -l -p 8080\n\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar proxy = {\n  protocol: 'http:',\n  host: \"127.0.0.1\",\n  port: 8080\n};\n\nproxy.auth = 500; // a number as 'auth'\nvar opts = url.parse('https://example.com/');\nvar agent = new HttpsProxyAgent(proxy);\nopts.agent = agent;\nhttps.get(opts);\n```\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nUpgrade `https-proxy-agent` to version 2.2.0 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321631)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-HTTPPROXYAGENT-12115"],"CVE":[],"CWE":["CWE-399"]},"semver":{"unaffected":">=2.1.0","vulnerable":"<2.0.0"},"severity":"high","cvssScore":8.2,"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H","patches":[],"creationTime":"2018-03-03T08:09:56.416Z","modificationTime":"2018-04-09T08:09:56.416Z","publicationTime":"2018-04-09T15:17:27.354Z","disclosureTime":"2018-04-06T08:09:56.416Z","id":"npm:http-proxy-agent:20180406","alternativeIds":["SNYK-JS-HTTPPROXYAGENT-12115"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","proxy-agent@2.0.0","http-proxy-agent@1.0.0"],"upgradePath":[false,false,false,false,"mailgun-js@0.17.0","proxy-agent@3.0.0","http-proxy-agent@2.1.0"],"version":"1.0.0","name":"http-proxy-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/http-proxy-agent/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"moduleName":"http-proxy-agent","packageName":"http-proxy-agent","language":"js","packageManager":"npm","description":"## Overview\n[http-proxy-agent](https://www.npmjs.com/package/http-proxy-agent) provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in http module.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure and Denial of Service (DoS) attacks due to passing unsanitized options to Buffer(arg).\n\n## Uninitialized memory Exposre PoC by ChALKer\n```js\n// listen with: nc -l -p 8080\n\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar proxy = {\n  protocol: 'http:',\n  host: \"127.0.0.1\",\n  port: 8080\n};\n\nproxy.auth = 500; // a number as 'auth'\nvar opts = url.parse('https://example.com/');\nvar agent = new HttpsProxyAgent(proxy);\nopts.agent = agent;\nhttps.get(opts);\n```\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nUpgrade `https-proxy-agent` to version 2.2.0 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321631)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-HTTPPROXYAGENT-12115"],"CVE":[],"CWE":["CWE-399"]},"semver":{"unaffected":">=2.1.0","vulnerable":"<2.0.0"},"severity":"high","cvssScore":8.2,"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H","patches":[],"creationTime":"2018-03-03T08:09:56.416Z","modificationTime":"2018-04-09T08:09:56.416Z","publicationTime":"2018-04-09T15:17:27.354Z","disclosureTime":"2018-04-06T08:09:56.416Z","id":"npm:http-proxy-agent:20180406","alternativeIds":["SNYK-JS-HTTPPROXYAGENT-12115"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","proxy-agent@2.0.0","pac-proxy-agent@1.1.0","http-proxy-agent@1.0.0"],"upgradePath":[false,false,false,false,"mailgun-js@0.11.3","proxy-agent@2.1.0","pac-proxy-agent@2.0.1","http-proxy-agent@2.1.0"],"version":"1.0.0","name":"http-proxy-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/http-proxy-agent/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"moduleName":"https-proxy-agent","packageName":"https-proxy-agent","language":"js","packageManager":"npm","description":"## Overview\n[`https-proxy-agent`](https://www.npmjs.com/package/https-proxy-agent) provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in https module.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure and Denial of Service (DoS) attacks due to passing unsanitized options to Buffer(arg).\n\n## Uninitialized memory Exposre PoC by ChALKer\n```js\n// listen with: nc -l -p 8080\n\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar proxy = {\n  protocol: 'http:',\n  host: \"127.0.0.1\",\n  port: 8080\n};\n\nproxy.auth = 500; // a number as 'auth'\nvar opts = url.parse('https://example.com/');\nvar agent = new HttpsProxyAgent(proxy);\nopts.agent = agent;\nhttps.get(opts);\n```\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nUpgrade `https-proxy-agent` to version 2.2.0 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/319532)","identifiers":{"ALTERNATIVE":["SNYK-JS-HTTPSPROXYAGENT-12113"],"CVE":[],"CWE":["CWE-399"]},"semver":{"unaffected":">=2.2.0","vulnerable":"<2.2.0"},"severity":"high","cvssScore":8.2,"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H","patches":[],"creationTime":"2018-02-25T06:36:33.413Z","modificationTime":"2018-04-05T06:36:33.413Z","publicationTime":"2018-04-08T12:56:16.212Z","disclosureTime":"2018-04-02T06:36:33.413Z","id":"npm:https-proxy-agent:20180402","alternativeIds":["SNYK-JS-HTTPSPROXYAGENT-12113"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","proxy-agent@2.0.0","https-proxy-agent@1.0.0"],"upgradePath":[false,false,false,false,"mailgun-js@0.17.0","proxy-agent@3.0.0","https-proxy-agent@2.2.1"],"version":"1.0.0","name":"https-proxy-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/https-proxy-agent/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"moduleName":"https-proxy-agent","packageName":"https-proxy-agent","language":"js","packageManager":"npm","description":"## Overview\n[`https-proxy-agent`](https://www.npmjs.com/package/https-proxy-agent) provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in https module.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure and Denial of Service (DoS) attacks due to passing unsanitized options to Buffer(arg).\n\n## Uninitialized memory Exposre PoC by ChALKer\n```js\n// listen with: nc -l -p 8080\n\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar proxy = {\n  protocol: 'http:',\n  host: \"127.0.0.1\",\n  port: 8080\n};\n\nproxy.auth = 500; // a number as 'auth'\nvar opts = url.parse('https://example.com/');\nvar agent = new HttpsProxyAgent(proxy);\nopts.agent = agent;\nhttps.get(opts);\n```\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nUpgrade `https-proxy-agent` to version 2.2.0 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/319532)","identifiers":{"ALTERNATIVE":["SNYK-JS-HTTPSPROXYAGENT-12113"],"CVE":[],"CWE":["CWE-399"]},"semver":{"unaffected":">=2.2.0","vulnerable":"<2.2.0"},"severity":"high","cvssScore":8.2,"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H","patches":[],"creationTime":"2018-02-25T06:36:33.413Z","modificationTime":"2018-04-05T06:36:33.413Z","publicationTime":"2018-04-08T12:56:16.212Z","disclosureTime":"2018-04-02T06:36:33.413Z","id":"npm:https-proxy-agent:20180402","alternativeIds":["SNYK-JS-HTTPSPROXYAGENT-12113"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","proxy-agent@2.0.0","pac-proxy-agent@1.1.0","https-proxy-agent@1.0.0"],"upgradePath":[false,false,false,false,"mailgun-js@0.11.3","proxy-agent@2.1.0","pac-proxy-agent@2.0.1","https-proxy-agent@2.2.1"],"version":"1.0.0","name":"https-proxy-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/https-proxy-agent/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"moduleName":"ip","packageName":"ip","language":"js","packageManager":"npm","description":"## Overview\n[`ip`](https://www.npmjs.com/package/ip) is an IP address utility for node.js.\n\nAffected versions of the package are vulnerable to Uninitialized Memory Exposure due to an insecure use of the Node.js Buffer class.\n\n## Details\nThe Buffer class in Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\n```js\nconst buf1 = new Buffer([1,2,3]);\n// creates a buffer containing [01, 02, 03]\nconst buf2 = new Buffer('test');\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\nconst buf3 = new Buffer(10);\n// creates a buffer of length 10\n```\n\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\nFor more information on the Buffer vulnerability, go to our [blog](https://snyk.io/blog/exploiting-buffer/).\n\n## Remediation\nUpgrade `ip` to version 1.1.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/indutny/node-ip/commit/b2b4469255a624619bda71e52fd1f05dc0dd621f)\n","identifiers":{"CWE":["CWE-201"],"CVE":[],"ALTERNATIVE":["SNYK-JS-IP-10524"]},"semver":{"unaffected":">=1.1.5","vulnerable":"<1.1.5"},"patches":[],"severity":"medium","CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","disclosureTime":"2017-03-03T22:00:00.000Z","publicationTime":"2017-06-04T13:58:29.820Z","modificationTime":"2017-06-04T11:44:28.744Z","creationTime":"2017-06-04T11:44:28.744Z","id":"npm:ip:20170304","cvssScore":5.1,"alternativeIds":["SNYK-JS-IP-10524"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","proxy-agent@2.0.0","pac-proxy-agent@1.1.0","pac-resolver@2.0.0","ip@1.0.1"],"upgradePath":[false,false,false,false,"mailgun-js@0.11.3","proxy-agent@2.1.0","pac-proxy-agent@2.0.0","pac-resolver@3.0.0","ip@1.1.5"],"version":"1.0.1","name":"ip","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/ip/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","lodash@3.10.1"],"upgradePath":[false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/@openapi-mock/swagger-node-runner/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","lodash@3.10.1"],"upgradePath":[false,false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/bagpipes/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","lodash@3.10.1"],"upgradePath":[false,false,false,false,"machinepack-http@3.1.1"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machinepack-http/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machine@10.4.0","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,"machine@14.0.1"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machine/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machine@10.4.0","rttc@7.4.0","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/rttc/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machine@10.4.0","switchback@2.0.2","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/switchback/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machinepack-urls@4.1.0","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machinepack-urls/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machinepack-urls@4.1.0","machine@9.1.2","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,false,"machine@14.0.1"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machinepack-urls/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machinepack-urls@4.1.0","machine@9.1.2","rttc@4.5.2","lodash@3.10.1"],"upgradePath":[false,false,false,false,false,false,false,false,"lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machinepack-urls/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma-webpack@2.0.9","lodash@3.10.1"],"upgradePath":[false,"nwb@0.22.0","karma-webpack@2.0.13","lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":true,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/karma-webpack/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma-coverage@1.1.1","lodash@3.10.1"],"upgradePath":[false,false,"karma-coverage@1.1.2","lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/karma-coverage/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","eslint-config-sonar@0.0.6","eslint-plugin-no-wildcard-postmessage@0.1.3","eslint@1.10.3","inquirer@0.11.4","lodash@3.10.1"],"upgradePath":[false,false,false,"eslint@2.1.0","inquirer@0.12.0","lodash@4.17.5"],"version":"3.10.1","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/eslint-plugin-no-wildcard-postmessage/node_modules/lodash/package.json","parentDepType":"dev"},{"title":"Prototype Pollution","credit":["Olivier Arteau (HoLyVieR)"],"moduleName":"lodash","packageName":"lodash","language":"js","packageManager":"npm","description":"## Overview\n[lodash](https://lodash.com/) is a javaScript utility library delivering modularity, performance & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. \nThe utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \n\n## PoC by Olivier Arteau (HoLyVieR)\n```js\nvar _= require('lodash');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\n_.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/310443)\n","identifiers":{"ALTERNATIVE":["SNYK-JS-LODASH-12060"],"CVE":["CVE-2018-3721"],"CWE":["CWE-400"]},"semver":{"unaffected":">=4.17.5","vulnerable":"<4.17.5"},"severity":"low","cvssScore":1.8,"CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-12T22:28:27.654Z","modificationTime":"2018-02-13T22:28:27.654Z","publicationTime":"2018-02-14T13:22:50.572Z","disclosureTime":"2018-01-30T22:28:27.654Z","id":"npm:lodash:20180130","alternativeIds":["SNYK-JS-LODASH-12060"],"from":["DependencysMirror@1.0.0","openapi-mock@0.0.7","@openapi-mock/swagger-node-runner@0.0.1","bagpipes@0.1.2","machinepack-http@2.4.0","machinepack-urls@4.1.0","machine@9.1.2","switchback@1.1.3","lodash@2.4.2"],"upgradePath":[false,false,false,false,false,false,false,false,"lodash@4.17.5"],"version":"2.4.2","name":"lodash","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/machinepack-urls/node_modules/switchback/node_modules/lodash/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Snyk Security Research Team"],"moduleName":"ms","packageName":"ms","language":"js","packageManager":"npm","id":"npm:ms:20170412","description":"## Overview\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\n\n*Proof of concept*\n```js\nms = require('ms');\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\n```\n\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\n\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Disclosure Timeline\n- Feb 9th, 2017 - Reported the issue to package owner.\n- Feb 11th, 2017 - Issue acknowledged by package owner.\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\n- May 15th, 2017 - Vulnerability published.\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\n\n## Remediation\nUpgrade `ms` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-MS-10509"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"],"version":"=1.0.0","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:0"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"],"version":"=0.7.2 || =0.7.3","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:1"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"],"version":"=0.7.1","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:2"}],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-04-11T21:00:00.000Z","publicationTime":"2017-05-15T06:02:45.497Z","modificationTime":"2017-05-21T10:02:45.497Z","creationTime":"2017-04-12T10:02:45.497Z","alternativeIds":["SNYK-JS-MS-10509"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","mailgun-js@0.7.15","debug@2.2.0","ms@0.7.1"],"upgradePath":[false,false,false,false,"mailgun-js@0.10.1","debug@2.6.7","ms@2.0.0"],"version":"0.7.1","name":"ms","isUpgradable":false,"isPatchable":true,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/mailgun-js/node_modules/ms/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Snyk Security Research Team"],"moduleName":"ms","packageName":"ms","language":"js","packageManager":"npm","id":"npm:ms:20170412","description":"## Overview\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\n\n*Proof of concept*\n```js\nms = require('ms');\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\n```\n\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\n\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Disclosure Timeline\n- Feb 9th, 2017 - Reported the issue to package owner.\n- Feb 11th, 2017 - Issue acknowledged by package owner.\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\n- May 15th, 2017 - Vulnerability published.\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\n\n## Remediation\nUpgrade `ms` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)\n","identifiers":{"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-MS-10509"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_100.patch"],"version":"=1.0.0","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:0"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_072-073.patch"],"version":"=0.7.2 || =0.7.3","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:1"},{"urls":["https://s3.amazonaws.com/snyk-rules-pre-repository/snapshots/master/patches/npm/ms/20170412/ms_071.patch"],"version":"=0.7.1","modificationTime":"2017-05-16T10:12:18.990Z","comments":[],"id":"patch:npm:ms:20170412:2"}],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","disclosureTime":"2017-04-11T21:00:00.000Z","publicationTime":"2017-05-15T06:02:45.497Z","modificationTime":"2017-05-21T10:02:45.497Z","creationTime":"2017-04-12T10:02:45.497Z","alternativeIds":["SNYK-JS-MS-10509"],"from":["DependencysMirror@1.0.0","tape-watch@2.3.0","debug@2.6.0","ms@0.7.2"],"upgradePath":[false,false,"debug@2.6.7","ms@2.0.0"],"version":"0.7.2","name":"ms","isUpgradable":false,"isPatchable":true,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/tape-watch/node_modules/ms/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","jest@20.0.4","jest-cli@20.0.4","jest-runtime@20.0.4","jest-config@20.0.4","jest-environment-jsdom@20.0.3","jsdom@9.12.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-validate@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-runtime@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"nwmatcher","packageName":"nwmatcher","language":"js","packageManager":"npm","description":"## Overview\n[`nwmatcher`](https://www.npmjs.com/package/nwmatcher) is a CSS3-compliant JavaScript selector engine.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. This can cause an impact of about 10 seconds matching time for data 2k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Mar 5th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `nmwatcher`.\n","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"identifiers":{"CWE":["CWE-185","CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-NWMATCHER-11022"]},"patches":[],"cvssScore":3.7,"severity":"low","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","creationTime":"2018-03-05T16:44:48.604Z","modificationTime":"2018-03-05T16:44:48.604Z","publicationTime":"2018-03-05T17:32:59.525Z","disclosureTime":"2018-03-05T16:44:48.604Z","id":"npm:nwmatcher:20180305","alternativeIds":["SNYK-JS-NWMATCHER-11022"],"from":["DependencysMirror@1.0.0","jest@22.4.3","jest-cli@22.4.3","jest-runner@22.4.3","jest-config@22.4.3","jest-environment-jsdom@22.4.3","jsdom@11.10.0","nwmatcher@1.4.4"],"upgradePath":[],"version":"1.4.4","name":"nwmatcher","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/nwmatcher/package.json","parentDepType":"dev"},{"title":"Prototype Override","credit":["Unknown"],"moduleName":"querystringify","packageName":"querystringify","language":"js","packageManager":"npm","description":"## Overview\n[`querystringify`](https://www.npmjs.com/package/querystringify) is Querystringify - Small, simple but powerful query string parser.\n\nAffected versions of the package are vulnerable to Prototype Override. If a malicious string is inserted in the query string, it will set the `tostring` method of the object to the `true` boolean.\n\n## Remediation\nUpgrade `querystringify` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/unshiftio/querystringify/pull/19)\n- [GitHub Commit](https://github.com/unshiftio/querystringify/commit/422eb4f6c7c28ee5f100dcc64177d3b68bb2b080)\n","identifiers":{"CWE":["CWE-20"],"CVE":[],"ALTERNATIVE":["SNYK-JS-QUERYSTRINGIFY-11091"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[],"cvssScore":7.4,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N","disclosureTime":"2018-04-18T21:00:00.000Z","publicationTime":"2018-04-26T13:17:39.334Z","modificationTime":"2018-04-25T12:36:24.040Z","creationTime":"2018-04-25T12:36:24.040Z","id":"npm:querystringify:20180419","alternativeIds":["SNYK-JS-QUERYSTRINGIFY-11091"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","webpack-dev-server@2.9.7","sockjs-client@1.1.4","eventsource@0.1.6","original@1.0.0","url-parse@1.0.5","querystringify@0.0.4"],"upgradePath":[false,false,false,false,false,false,"url-parse@1.4.0","querystringify@2.0.0"],"version":"0.0.4","name":"querystringify","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/querystringify/package.json","parentDepType":"prod"},{"title":"Prototype Override","credit":["Unknown"],"moduleName":"querystringify","packageName":"querystringify","language":"js","packageManager":"npm","description":"## Overview\n[`querystringify`](https://www.npmjs.com/package/querystringify) is Querystringify - Small, simple but powerful query string parser.\n\nAffected versions of the package are vulnerable to Prototype Override. If a malicious string is inserted in the query string, it will set the `tostring` method of the object to the `true` boolean.\n\n## Remediation\nUpgrade `querystringify` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/unshiftio/querystringify/pull/19)\n- [GitHub Commit](https://github.com/unshiftio/querystringify/commit/422eb4f6c7c28ee5f100dcc64177d3b68bb2b080)\n","identifiers":{"CWE":["CWE-20"],"CVE":[],"ALTERNATIVE":["SNYK-JS-QUERYSTRINGIFY-11091"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[],"cvssScore":7.4,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N","disclosureTime":"2018-04-18T21:00:00.000Z","publicationTime":"2018-04-26T13:17:39.334Z","modificationTime":"2018-04-25T12:36:24.040Z","creationTime":"2018-04-25T12:36:24.040Z","id":"npm:querystringify:20180419","alternativeIds":["SNYK-JS-QUERYSTRINGIFY-11091"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","react-dev-utils@5.0.1","sockjs-client@1.1.4","eventsource@0.1.6","original@1.0.0","url-parse@1.0.5","querystringify@0.0.4"],"upgradePath":[false,false,false,false,false,false,"url-parse@1.4.0","querystringify@2.0.0"],"version":"0.0.4","name":"querystringify","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/querystringify/package.json","parentDepType":"prod"},{"title":"Prototype Override","credit":["Unknown"],"moduleName":"querystringify","packageName":"querystringify","language":"js","packageManager":"npm","description":"## Overview\n[`querystringify`](https://www.npmjs.com/package/querystringify) is Querystringify - Small, simple but powerful query string parser.\n\nAffected versions of the package are vulnerable to Prototype Override. If a malicious string is inserted in the query string, it will set the `tostring` method of the object to the `true` boolean.\n\n## Remediation\nUpgrade `querystringify` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/unshiftio/querystringify/pull/19)\n- [GitHub Commit](https://github.com/unshiftio/querystringify/commit/422eb4f6c7c28ee5f100dcc64177d3b68bb2b080)\n","identifiers":{"CWE":["CWE-20"],"CVE":[],"ALTERNATIVE":["SNYK-JS-QUERYSTRINGIFY-11091"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[],"cvssScore":7.4,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N","disclosureTime":"2018-04-18T21:00:00.000Z","publicationTime":"2018-04-26T13:17:39.334Z","modificationTime":"2018-04-25T12:36:24.040Z","creationTime":"2018-04-25T12:36:24.040Z","id":"npm:querystringify:20180419","alternativeIds":["SNYK-JS-QUERYSTRINGIFY-11091"],"from":["DependencysMirror@1.0.0","@storybook/react@3.4.3","react-dev-utils@5.0.1","sockjs-client@1.1.4","eventsource@0.1.6","original@1.0.0","url-parse@1.0.5","querystringify@0.0.4"],"upgradePath":[false,false,false,false,false,false,"url-parse@1.4.0","querystringify@2.0.0"],"version":"0.0.4","name":"querystringify","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/querystringify/package.json","parentDepType":"dev"},{"title":"Prototype Override","credit":["Unknown"],"moduleName":"querystringify","packageName":"querystringify","language":"js","packageManager":"npm","description":"## Overview\n[`querystringify`](https://www.npmjs.com/package/querystringify) is Querystringify - Small, simple but powerful query string parser.\n\nAffected versions of the package are vulnerable to Prototype Override. If a malicious string is inserted in the query string, it will set the `tostring` method of the object to the `true` boolean.\n\n## Remediation\nUpgrade `querystringify` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/unshiftio/querystringify/pull/19)\n- [GitHub Commit](https://github.com/unshiftio/querystringify/commit/422eb4f6c7c28ee5f100dcc64177d3b68bb2b080)\n","identifiers":{"CWE":["CWE-20"],"CVE":[],"ALTERNATIVE":["SNYK-JS-QUERYSTRINGIFY-11091"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[],"cvssScore":7.4,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N","disclosureTime":"2018-04-18T21:00:00.000Z","publicationTime":"2018-04-26T13:17:39.334Z","modificationTime":"2018-04-25T12:36:24.040Z","creationTime":"2018-04-25T12:36:24.040Z","id":"npm:querystringify:20180419","alternativeIds":["SNYK-JS-QUERYSTRINGIFY-11091"],"from":["DependencysMirror@1.0.0","react-scripts@1.1.4","webpack-dev-server@2.9.4","sockjs-client@1.1.4","eventsource@0.1.6","original@1.0.0","url-parse@1.0.5","querystringify@0.0.4"],"upgradePath":[false,false,false,false,false,false,"url-parse@1.4.0","querystringify@2.0.0"],"version":"0.0.4","name":"querystringify","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/querystringify/package.json","parentDepType":"prod"},{"title":"Prototype Override","credit":["Unknown"],"moduleName":"querystringify","packageName":"querystringify","language":"js","packageManager":"npm","description":"## Overview\n[`querystringify`](https://www.npmjs.com/package/querystringify) is Querystringify - Small, simple but powerful query string parser.\n\nAffected versions of the package are vulnerable to Prototype Override. If a malicious string is inserted in the query string, it will set the `tostring` method of the object to the `true` boolean.\n\n## Remediation\nUpgrade `querystringify` to version 2.0.0 or higher.\n\n## References\n- [GitHub PR](https://github.com/unshiftio/querystringify/pull/19)\n- [GitHub Commit](https://github.com/unshiftio/querystringify/commit/422eb4f6c7c28ee5f100dcc64177d3b68bb2b080)\n","identifiers":{"CWE":["CWE-20"],"CVE":[],"ALTERNATIVE":["SNYK-JS-QUERYSTRINGIFY-11091"]},"semver":{"unaffected":">=2.0.0","vulnerable":"<2.0.0"},"patches":[],"cvssScore":7.4,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N","disclosureTime":"2018-04-18T21:00:00.000Z","publicationTime":"2018-04-26T13:17:39.334Z","modificationTime":"2018-04-25T12:36:24.040Z","creationTime":"2018-04-25T12:36:24.040Z","id":"npm:querystringify:20180419","alternativeIds":["SNYK-JS-QUERYSTRINGIFY-11091"],"from":["DependencysMirror@1.0.0","webpack-dev-server@2.11.2","sockjs-client@1.1.4","eventsource@0.1.6","original@1.0.0","url-parse@1.0.5","querystringify@0.0.4"],"upgradePath":[false,false,false,false,false,"url-parse@1.4.0","querystringify@2.0.0"],"version":"0.0.4","name":"querystringify","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/querystringify/package.json","parentDepType":"dev"},{"title":"Command Injection","moduleName":"shelljs","packageName":"shelljs","description":"## Overview\n[`shelljs`](https://www.npmjs.com/package/shelljs) is a portable Unix shell commands for Node.js.\n\nAffected version of this package are vulnerable to Command Injection. It is possible to invoke commands from `shell.exec()` from external sources, allowing an attacker to inject arbitrary commands.  \n\n## Remediation\nThere is no fix version for `shelljs`.\n\n## References\n- [GitHub Issue #1](https://github.com/shelljs/shelljs/issues/143)\n- [GitHub Issue #2](https://github.com/shelljs/shelljs/issues/495)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/524)","language":"js","packageManager":"npm","identifiers":{"CWE":["CWE-77"],"CVE":[],"ALTERNATIVE":["SNYK-JS-SHELLJS-10215"]},"severity":"high","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"credit":["Chris Corbyn"],"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L","disclosureTime":"2014-07-22T21:00:00.000Z","patches":[],"publicationTime":"2017-02-13T15:39:20.483Z","modificationTime":"2017-02-13T15:39:20.483Z","creationTime":"2016-11-23T15:39:20.483Z","id":"npm:shelljs:20140723","cvssScore":7,"alternativeIds":["SNYK-JS-SHELLJS-10215"],"from":["DependencysMirror@1.0.0","@storybook/react@3.4.3","@storybook/core@3.4.3","shelljs@0.8.2"],"upgradePath":[],"version":"0.8.2","name":"shelljs","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/shelljs/package.json","parentDepType":"dev"},{"title":"Command Injection","moduleName":"shelljs","packageName":"shelljs","description":"## Overview\n[`shelljs`](https://www.npmjs.com/package/shelljs) is a portable Unix shell commands for Node.js.\n\nAffected version of this package are vulnerable to Command Injection. It is possible to invoke commands from `shell.exec()` from external sources, allowing an attacker to inject arbitrary commands.  \n\n## Remediation\nThere is no fix version for `shelljs`.\n\n## References\n- [GitHub Issue #1](https://github.com/shelljs/shelljs/issues/143)\n- [GitHub Issue #2](https://github.com/shelljs/shelljs/issues/495)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/524)","language":"js","packageManager":"npm","identifiers":{"CWE":["CWE-77"],"CVE":[],"ALTERNATIVE":["SNYK-JS-SHELLJS-10215"]},"severity":"high","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"credit":["Chris Corbyn"],"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L","disclosureTime":"2014-07-22T21:00:00.000Z","patches":[],"publicationTime":"2017-02-13T15:39:20.483Z","modificationTime":"2017-02-13T15:39:20.483Z","creationTime":"2016-11-23T15:39:20.483Z","id":"npm:shelljs:20140723","cvssScore":7,"alternativeIds":["SNYK-JS-SHELLJS-10215"],"from":["DependencysMirror@1.0.0","eslint-config-sonar@0.0.6","eslint-plugin-no-wildcard-postmessage@0.1.3","eslint@1.10.3","shelljs@0.5.3"],"upgradePath":[],"version":"0.5.3","name":"shelljs","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/eslint-plugin-no-wildcard-postmessage/node_modules/shelljs/package.json","parentDepType":"dev"},{"title":"Command Injection","moduleName":"shelljs","packageName":"shelljs","description":"## Overview\n[`shelljs`](https://www.npmjs.com/package/shelljs) is a portable Unix shell commands for Node.js.\n\nAffected version of this package are vulnerable to Command Injection. It is possible to invoke commands from `shell.exec()` from external sources, allowing an attacker to inject arbitrary commands.  \n\n## Remediation\nThere is no fix version for `shelljs`.\n\n## References\n- [GitHub Issue #1](https://github.com/shelljs/shelljs/issues/143)\n- [GitHub Issue #2](https://github.com/shelljs/shelljs/issues/495)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/524)","language":"js","packageManager":"npm","identifiers":{"CWE":["CWE-77"],"CVE":[],"ALTERNATIVE":["SNYK-JS-SHELLJS-10215"]},"severity":"high","semver":{"vulnerable":"*","unaffected":"<0.0.0"},"credit":["Chris Corbyn"],"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L","disclosureTime":"2014-07-22T21:00:00.000Z","patches":[],"publicationTime":"2017-02-13T15:39:20.483Z","modificationTime":"2017-02-13T15:39:20.483Z","creationTime":"2016-11-23T15:39:20.483Z","id":"npm:shelljs:20140723","cvssScore":7,"alternativeIds":["SNYK-JS-SHELLJS-10215"],"from":["DependencysMirror@1.0.0","sass-lint@1.12.1","eslint@2.13.1","shelljs@0.6.1"],"upgradePath":[],"version":"0.6.1","name":"shelljs","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/sass-lint/node_modules/shelljs/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Cristian-Alexandru Staicu"],"moduleName":"timespan","packageName":"timespan","language":"js","packageManager":"npm","description":"## Overview\n[`timespan`](https://www.npmjs.com/package/timespan) is a JavaScript TimeSpan library for node.js (and soon the browser).\n\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 10 seconds per 50k characters.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Many Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a specially crafted input and cause the service to excessively consume CPU, resulting in a Denial of Service.\n\nYou can read more about `Regular Expression Denial of Service (ReDoS)` on our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\n\n## Remediation\nThere is no fix version for `timespan`.\n\n## References\n- [Github Issue](https://github.com/indexzero/TimeSpan.js/issues/10)\n","identifiers":{"NSP":533,"CWE":["CWE-400"],"CVE":[],"ALTERNATIVE":["SNYK-JS-TIMESPAN-10786"]},"semver":{"vulnerable":"*","unaffected":"<0.0.0"},"patches":[],"cvssScore":7.5,"severity":"high","CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","disclosureTime":"2017-09-07T21:00:00.000Z","publicationTime":"2017-09-26T05:48:40.307Z","modificationTime":"2017-09-26T05:48:40.307Z","creationTime":"2017-09-26T05:48:40.307Z","id":"npm:timespan:20170907","alternativeIds":["SNYK-JS-TIMESPAN-10786"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","timespan@2.3.0"],"upgradePath":[],"version":"2.3.0","name":"timespan","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/timespan/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"language":"js","packageManager":"npm","moduleName":"tunnel-agent","packageName":"tunnel-agent","id":"npm:tunnel-agent:20170305","description":"## Overview\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \n\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\n\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\n\n## Details\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\n\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\n```js\n// uninitialized Buffer of length 100\nx = new Buffer(100);\n// initialized Buffer with value of '100'\nx = new Buffer('100');\n```\n\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\n\n#### Proof of concept by ChALkeR\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n      protocol: 'http:',\n      host:\"127.0.0.1\",\n      port:8080,\n      auth:80\n  }\n});\n```\n\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\n\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\n\n## Remediation\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\n\n## References\n- [PoC by ChALkeR](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n- [Github Commit](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n","identifiers":{"CWE":["CWE-201"],"CVE":[],"ALTERNATIVE":["SNYK-JS-TUNNELAGENT-10672"]},"semver":{"unaffected":">=0.6.0","vulnerable":"<0.6.0"},"patches":[],"cvssScore":5.1,"severity":"medium","CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","disclosureTime":"2017-03-04T22:00:00.000Z","publicationTime":"2017-07-05T14:05:50.139Z","modificationTime":"2017-07-05T07:23:57.738Z","creationTime":"2017-07-05T07:23:57.738Z","alternativeIds":["SNYK-JS-TUNNELAGENT-10672"],"from":["DependencysMirror@1.0.0","nwb@0.21.5","karma@2.0.0","log4js@2.5.3","loggly@1.1.1","request@2.75.0","tunnel-agent@0.4.3"],"upgradePath":[false,false,false,false,false,"request@2.81.0","tunnel-agent@0.6.0"],"version":"0.4.3","name":"tunnel-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/loggly/node_modules/tunnel-agent/package.json","parentDepType":"prod"},{"title":"Uninitialized Memory Exposure","credit":["ChALkeR"],"language":"js","packageManager":"npm","moduleName":"tunnel-agent","packageName":"tunnel-agent","id":"npm:tunnel-agent:20170305","description":"## Overview\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \n\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\n\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\n\n## Details\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\n\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\n```js\n// uninitialized Buffer of length 100\nx = new Buffer(100);\n// initialized Buffer with value of '100'\nx = new Buffer('100');\n```\n\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\n\n#### Proof of concept by ChALkeR\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n      protocol: 'http:',\n      host:\"127.0.0.1\",\n      port:8080,\n      auth:80\n  }\n});\n```\n\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\n\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\n\n## Remediation\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\n\n## References\n- [PoC by ChALkeR](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n- [Github Commit](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n","identifiers":{"CWE":["CWE-201"],"CVE":[],"ALTERNATIVE":["SNYK-JS-TUNNELAGENT-10672"]},"semver":{"unaffected":">=0.6.0","vulnerable":"<0.6.0"},"patches":[],"cvssScore":5.1,"severity":"medium","CVSSv3":"CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","disclosureTime":"2017-03-04T22:00:00.000Z","publicationTime":"2017-07-05T14:05:50.139Z","modificationTime":"2017-07-05T07:23:57.738Z","creationTime":"2017-07-05T07:23:57.738Z","alternativeIds":["SNYK-JS-TUNNELAGENT-10672"],"from":["DependencysMirror@1.0.0","node-sass@4.9.0","request@2.79.0","tunnel-agent@0.4.3"],"upgradePath":[false,false,"request@2.81.0","tunnel-agent@0.6.0"],"version":"0.4.3","name":"tunnel-agent","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/node-sass/node_modules/tunnel-agent/package.json","parentDepType":"dev"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"validator","packageName":"validator","language":"js","packageManager":"npm","description":"## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-VALIDATOR-10896"]},"semver":{"unaffected":">=9.4.1","vulnerable":"<9.4.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-18T14:36:50.000Z","modificationTime":"2018-02-18T14:29:31.469Z","publicationTime":"2018-02-18T15:02:40.389Z","disclosureTime":"2018-02-18T20:39:06.000Z","id":"npm:validator:20180218","alternativeIds":["SNYK-JS-VALIDATOR-10896"],"from":["DependencysMirror@1.0.0","oas-raml-converter@1.1.32","swagger-parser@4.0.0-beta.2","z-schema@3.18.4","validator@8.2.0"],"upgradePath":[false,false,"swagger-parser@4.0.0","z-schema@3.19.0","validator@9.4.1"],"version":"8.2.0","name":"validator","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/validator/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"validator","packageName":"validator","language":"js","packageManager":"npm","description":"## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-VALIDATOR-10896"]},"semver":{"unaffected":">=9.4.1","vulnerable":"<9.4.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-18T14:36:50.000Z","modificationTime":"2018-02-18T14:29:31.469Z","publicationTime":"2018-02-18T15:02:40.389Z","disclosureTime":"2018-02-18T20:39:06.000Z","id":"npm:validator:20180218","alternativeIds":["SNYK-JS-VALIDATOR-10896"],"from":["DependencysMirror@1.0.0","oas-raml-converter@1.1.32","swagger-parser@4.0.0-beta.2","json-schema-ref-parser@3.3.1","z-schema@3.18.4","validator@8.2.0"],"upgradePath":[false,false,false,"json-schema-ref-parser@3.3.1","z-schema@3.19.0","validator@9.4.1"],"version":"8.2.0","name":"validator","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/validator/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"validator","packageName":"validator","language":"js","packageManager":"npm","description":"## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-VALIDATOR-10896"]},"semver":{"unaffected":">=9.4.1","vulnerable":"<9.4.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-18T14:36:50.000Z","modificationTime":"2018-02-18T14:29:31.469Z","publicationTime":"2018-02-18T15:02:40.389Z","disclosureTime":"2018-02-18T20:39:06.000Z","id":"npm:validator:20180218","alternativeIds":["SNYK-JS-VALIDATOR-10896"],"from":["DependencysMirror@1.0.0","oas-raml-converter@1.1.32","raml-1-parser@1.1.42","z-schema@3.18.4","validator@8.2.0"],"upgradePath":[false,false,false,"z-schema@3.19.0","validator@9.4.1"],"version":"8.2.0","name":"validator","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/validator/package.json","parentDepType":"prod"},{"title":"Regular Expression Denial of Service (ReDoS)","credit":["Jamie Davis"],"moduleName":"validator","packageName":"validator","language":"js","packageManager":"npm","description":"## Overview\n[`validator`](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`) in order to validate Data URIs. This can cause an impact of about 10 seconds matching time for data 70K characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 16th, 2018 - Initial Response from package owner\n* Feb 18th, 2018 - Fix issued\n* Feb 18th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 9.4.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e)\n- [GitHub Changelog](https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941)","identifiers":{"CVE":[],"CWE":["CWE-185","CWE-400"],"ALTERNATIVE":["SNYK-JS-VALIDATOR-10896"]},"semver":{"unaffected":">=9.4.1","vulnerable":"<9.4.1"},"severity":"low","cvssScore":3.7,"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","patches":[],"creationTime":"2018-02-18T14:36:50.000Z","modificationTime":"2018-02-18T14:29:31.469Z","publicationTime":"2018-02-18T15:02:40.389Z","disclosureTime":"2018-02-18T20:39:06.000Z","id":"npm:validator:20180218","alternativeIds":["SNYK-JS-VALIDATOR-10896"],"from":["DependencysMirror@1.0.0","oas-raml-converter@1.1.32","raml-1-parser@1.1.42","raml-definition-system@0.0.80","raml-typesystem@0.0.85","raml-json-validation@0.0.16","z-schema@3.18.4","validator@8.2.0"],"upgradePath":[false,false,false,false,false,false,"z-schema@3.19.0","validator@9.4.1"],"version":"8.2.0","name":"validator","isUpgradable":false,"isPatchable":false,"__filename":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438/node_modules/validator/package.json","parentDepType":"prod"}],"dependencyCount":2210,"org":"penx","licensesPolicy":null,"isPrivate":true,"packageManager":"npm","policy":"# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.10.2\nignore: {}\npatch: {}\n","ignoreSettings":null,"summary":"217 vulnerable dependency paths","filesystemPolicy":false,"filtered":{"ignore":[],"patch":[]},"uniqueCount":18,"path":"/Users/penx/Development/ibm/ui-dependencies/requests/20180509153438"}
